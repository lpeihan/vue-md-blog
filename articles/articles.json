{
  "flex.md": {
    "title": "flex",
    "tags": "javascript css",
    "date": "2018-05-14",
    "content": "{\r\n  \"title\": \"flex\",\r\n  \"tags\": \"javascript css\",\r\n  \"date\": \"2018-05-14\"\r\n}\r\n\r\n#### flex\r\n\r\n`flex`就是`flexible box`的缩写，意为弹性布局。\r\n\r\n任何一个容器都可以指定为`flex`布局。\r\n\r\n```css\r\n.box {\r\n  display: flex;\r\n}\r\n```\r\n\r\n行内元素也可以使用`flex`布局。\r\n\r\n```css\r\n.box {\r\n  display: inline-flex;\r\n}\r\n```\r\n\r\n注意，设为`flex`布局后，子元素的`float` `clear` `vertical-align`属性都会失效。\r\n\r\n"
  },
  "dictionary.md": {
    "title": "Dictionary",
    "tags": "javascript 数据结构",
    "date": "2018-05-18",
    "content": "{\r\n  \"title\": \"Dictionary\",\r\n  \"tags\": \"javascript 数据结构\",\r\n  \"date\": \"2018-05-18\"\r\n}\r\n\r\n字典是一种以`键-值`形式存储的数数据结构，就像电话号码簿里的名字和电话号码一样。要找一个电话时，先找名字，名字找到了，紧挨这它的电话号码也就找到了。\r\n\r\n`JavaScript`的`Object`类就是以字典的形式存在的。\r\n\r\n`Dictionary`类的基础是`Array`类，而不是`Object`类。\r\n\r\n1. `Dictionary`类\r\n\r\n```js\r\nclass Dictionary {\r\n  constructor() {\r\n    this.dataStore = new Array();\r\n  }\r\n\r\n  add(key, value) {\r\n    this.dataStore[key] = value;\r\n  }\r\n\r\n  remove(key) {\r\n    delete this.dataStore[key];\r\n  }\r\n\r\n  count() {\r\n    return Object.keys(this.dataStore).length;\r\n  }\r\n\r\n  clear() {\r\n    Object.keys(this.dataStore).forEach((key) => {\r\n      delete this.dataStore[key];\r\n    });\r\n  }\r\n  \r\n  // sort 是对键值进行排序\r\n  showAll() {\r\n    const keys = Object.keys(this.dataStore).sort();\r\n\r\n    if (keys.length) {\r\n      keys.forEach((key) => {\r\n        console.log(`${key} -> ${this.dataStore[key]}`);\r\n      });\r\n    } else {\r\n      console.log(null);\r\n    }\r\n  }\r\n}\r\n\r\nconst pbook = new Dictionary();\r\npbook.add('Mike', 123);\r\npbook.add('David', 456);\r\npbook.add('Cynthia', 456);\r\npbook.remove('David');\r\npbook.showAll();\r\npbook.clear();\r\npbook.showAll();\r\n```\r\n\r\n"
  },
  "hello.md": {
    "title": "Vue-Occupy",
    "tags": "javascript vue tool",
    "date": "2018-05-13",
    "content": "{\r\n  \"title\": \"Vue-Occupy\",\r\n  \"tags\": \"javascript vue tool\",\r\n  \"date\": \"2018-05-13\"\r\n}\r\n\r\nA Vue directive for occupying content places before the data has been loaded.\r\n\r\nIt's good for user experiment improving.\r\n\r\n# Install\r\nUsing `yarn` or `npm` to install `vue-occupy`:\r\n\r\n```\r\n# yarn\r\nyarn add vue-occupy\r\n\r\n# npm\r\nnpm install vue-occupy\r\n```\r\n"
  },
  "promise.md": {
    "title": "promise",
    "tags": "javascript mongo redis webpack node koa express",
    "date": "2018-03-01",
    "content": "{\r\n  \"title\": \"promise\",\r\n  \"tags\": \"javascript mongo redis webpack node koa express\",\r\n  \"date\": \"2018-03-01\"\r\n}\r\n\r\n* 概念\r\n\r\n`Promise`是异步编程的一种解决方案，比传统的解决方案（回调函数和事件）更合理更强大，能优雅解决回调地狱难题。\r\n\r\n所谓`Promise`，简单说就是一个容器，里面保存着某个未来才会结束的事件的结果。\r\n\r\n`Promise`对象代表一个异步操作，有三种状态：`Pending(进行中)`、`Resolved(已完成)`和`Rejected(已失败)`。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是`Promise`这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。 \r\n\r\n* 基本用法\r\n\r\n`Promise`构造函数接受一个函数作为参数，该函数的两个参数分别是`resolve`和`reject`。\r\n\r\n`resolve`将`Promise`对象的状态从从`Pending`变为`Resolved`，在异步操作成功时调用，并将异步操作的结果，作为参数传递出去。\r\n\r\n`reject`函数的作用是，在异步操作失败时调用，并将异步操作报出的错误，作为参数传递出去。\r\n\r\n`Promise`实例生成以后，可以用`then`方法分别制定`Resolved`状态和`Rejected`状态的回调函数。\r\n\r\n```javascript\r\nconst promise = new Promise(function(resolve, reject) {\r\n  // ... some code\r\n  if (/* 异步操作成功 */) {\r\n    resolve(value);\r\n  } else {\r\n    reject(error);\r\n  }\r\n});\r\n\r\npromise.then(function(value) {\r\n  // sucess\r\n}, function(error) {\r\n  // failure\r\n});\r\n```\r\n"
  },
  "resiful-api.md": {
    "title": "promise",
    "tags": "javascript mongo redis webpack node koa express",
    "date": "2018-03-01",
    "content": "{\r\n  \"title\": \"promise\",\r\n  \"tags\": \"javascript mongo redis webpack node koa express\",\r\n  \"date\": \"2018-03-01\"\r\n}\r\n\r\n资源：网络上的一个实体，或者一个具体信息。\r\n\r\n`restful api` ：\r\n\r\n`http`协议：应用层协议。\r\n\r\n完整的`URL` ：`schema://host[:port]path[?query-string][#anchor]`\r\n\r\n协议、`IP`地址或域名、端口、资源路径、发送给`http`的数据、锚\r\n\r\n```js\r\nGET / HTTP/1.1 CRLF\r\n\r\n// get post put delete\r\n\r\nHTTP/1.1 200 OK\r\n\r\n响应状态码\r\n200 OK\r\n201 CREARED 新建或修改数据成功\r\n204 NO CONTENT 删除数据成功\r\n400 bad request 当前客户端请求有语法错误，不能被服务器所理解\r\n401 unauthorized 服务器收到请求，到客户端并没有授权，服务器拒绝服务\r\n403 forbidden 用户访问被禁止\r\n404 not found 请求资源不存在\r\n405 method not allowed,请求方法不被允许\r\n422 当创建一个对象时，发生一个错误，比如创建用户少了密码字段\r\n500 internal server error 服务器内部错误，服务器发生不可预知的错误\r\n503 server unavailble 服务器性能达到瓶颈\r\n```\r\n\r\n资源路径\r\n\r\n每一个网址代表一种资源，所以网址中不能有动词，只能有名词。一般来说，`API`中的名词应该使用负数。\r\n\r\n```js\r\nhttps://example.com/api/v1/zoos // 动物园资源\r\nhttps://example.com/api/v1/animals // 动物资源\r\n\r\nPOST /zoos 新建一个动物园\r\nGET /zoos/id 获取某个动物园\r\nPUT /zoos/id 更新一个动物园\r\nDELETE /zoos/id 删除一个动物园\r\n\r\n过滤信息：\r\n?offset=10\r\n?page=2&per_page=100\r\n?sortby=name&order=asc\r\n?animal_type_id=1\r\n\r\n```\r\n\r\n错误处理\r\n\r\n```js\r\n如果状态是 4xx 或者 5xx，就应该向用户返回出错信息。\r\n{\r\n    \"error\": \"参数错误\"\r\n}\r\n```\r\n\r\n返回结果\r\n\r\n```js\r\nGET /collections 返回资源对象列表（数组）\r\nGET /collections/identity 返回单个资源对象\r\nPOST /collection 返回新生成资源对象的全部属性\r\nPUT /collection/identity 返回完整的资源对象\r\nDELETE /collection/identity 返回一个空文档 204状态码\r\nPATCH /collection/identity 返回被修改的对象属性\r\n```\r\n\r\n实例：\r\n\r\n```js\r\n用户表： id username password create_time\r\n文章表： id title content create_time user\r\nrestful api 六要素：资源路径（URI）HTTP动词 过滤信息 状态码 错误处理 返回结果\r\n\r\n```\r\n\r\n\r\n\r\n参考：https://www.imooc.com/video/14356\r\n\r\n"
  },
  "test1.md": {
    "title": "Vue",
    "tags": "javascript vue tool",
    "date": "2018-05-13",
    "content": "{\r\n  \"title\": \"Vue\",\r\n  \"tags\": \"javascript vue tool\",\r\n  \"date\": \"2018-05-13\"\r\n}\r\n\r\nA Vue directive for occupying content places before the data has been loaded.\r\n\r\nIt's good for user experiment improving.\r\n\r\n# Install\r\nUsing `yarn` or `npm` to install `vue-occupy`:\r\n\r\n```\r\n# yarn\r\nyarn add vue-occupy\r\n\r\n# npm\r\nnpm install vue-occupy\r\n```\r\n"
  }
}